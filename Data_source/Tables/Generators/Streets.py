from random import choice
from random import randint

class generator:
    def version(self):
        return 1.0

    def start(self):
        result = self.pre()  + self.suf()
        
        return result.title()
        
    def pre(self):
        elements = ["ab", "abber", "abbey", "abbots", "abing", "accursed", "acnash", "acre", "adder", "adding", "al", "ald", "alden", "alder", "alk", "allen", "alt", "altar", "amber", "amble", "anchor", "angle", "ant", "apple", "arch", "archen", "archer", "ard", "arden", "armor", "arrow", "art", "ash", "ashen", "aston", "auld", "aulden", "avon", "ax", "axe", "azure", "back", "bad", "bag", "bald", "bard", "bards", "barn", "baron", "barren", "barrow", "bath", "battle", "bear", "bee", "bell", "berry", "bid", "big", "birch", "bird", "black", "blade", "bleeding", "blessed", "bliss", "bloom", "blue", "bolt", "bond", "bone", "boon", "box", "bow", "bowman", "bracken", "brae", "brand", "brandy", "brass", "bray", "brick", "bridge", "bright", "brink", "bronze", "brown", "bryn", "buck", "bull", "bur", "burning", "burnt", "by", "cam", "can", "candle", "cape", "carn", "carrick", "castle", "cave", "cedar", "center", "channel", "chapel", "charl", "cherry", "chet", "chip", "citadel", "city", "clay", "clear", "cleft", "cloak", "close", "cloud", "cloudy", "cloven", "clover", "coate", "cold", "concealed", "copper", "coral", "corn", "covetous", "crag", "creake", "crescent", "crick", "crook", "cross", "crow", "crows", "crystal", "cutt", "cutting", "dagger", "dale", "damp", "dank", "dark", "dart", "day", "dead", "deaf", "death", "deeping", "deer", "dell", "demon", "demons", "den", "devil", "devils", "diamond", "dim", "dirty", "diver", "dole", "don", "double", "dour", "dove", "dover", "down", "downs", "dragon", "dragons", "dripping", "drowning", "druid", "druids", "drum", "dry", "duck", "dun", "dust", "dwarf", "east", "eden", "edge", "eerie", "eld", "elder", "elf", "elven", "elk", "elken", "elm", "emerald", "enchanted", "endless", "ered", "etten", "even", "ever", "evil", "eye", "fair", "faith", "faithful", "father", "fall", "fang", "far", "fell", "fen", "fire", "first", "flame", "flat", "fleet", "fly", "flying", "foal", "fog", "ford", "fore", "forest", "forgotten", "forsaken", "fort", "four", "free", "freed", "friend", "friends", "frog", "frost", "fruit", "fruitful", "garth", "garnet", "gas", "gate", "gates", "ghost", "ghoul", "giant", "giants", "glacier", "glass", "glen", "glitter", "glory", "gloss", "goat", "goblin", "god", "gold", "golden", "good", "grand", "granite", "grave", "gray", "great", "green", "grey", "grim", "growling", "gruesome", "gryphon", "gryphons", "guarded", "guardian", "guild", "hag", "hale", "halfling", "hall", "hallow", "hammer", "handy", "harbor", "hard", "happy", "hard", "harp", "harpy", "harrow", "hart", "haunted", "hay", "hazel", "haz", "hazy", "heart", "helms", "hickory", "hidden", "high", "hill", "hind", "hoar", "hobbit", "hobbits", "hog", "hogs", "hold", "honey", "honor", "hook", "hoop", "hope", "horn", "horse", "hot", "howling", "huge", "hungry", "hyde", "hydra", "ice", "icey", "in", "infant", "infested", "infidel", "ink", "inland", "inn", "inner", "innocent", "inns", "iron", "ivory", "ivy", "jade", "javelin", "jewel", "jewels", "jinx", "joy", "joyful", "key", "king", "kings", "knight", "knights", "knock", "lake", "lame", "lamp", "lance", "last", "late", "law", "lawful", "legion", "left", "lewd", "lich", "liches", "light", "lion", "lime", "little", "live", "living", "lizard", "llan", "lone", "lonely", "long", "loose", "lost", "loud", "love", "lovely", "luck", "lune", "lyn", "mad", "mages", "maid", "maiden", "mal", "manor", "maple", "marble", "march", "mark", "marsh", "mate", "math", "may", "mean", "mel", "mere", "mid", "middle", "mill", "miller", "mine", "mirk", "mirky", "mirror", "mist", "misty", "monk", "monks", "moon", "moss", "mount", "mud", "muddy", "murk", "murky", "myth", "naked", "nameless", "narrow", "near", "neather", "necromancers", "new", "night", "nine", "noble", "nomad", "nor", "north", "norther", "northern", "oak", "oaken", "odd", "ogre", "old", "olden", "one", "open", "out", "over", "ox", "oxen", "pack", "pad", "pale", "past", "pearl", "peel", "pen", "pine", "placid", "plow", "prince", "pure", "quarry", "quarter", "quick", "quiet", "rabid", "rake", "rain", "rainy", "ram", "rare", "raven", "ravens", "rebel", "red", "rich", "right", "rising", "riven", "roaring", "roc", "rogue", "rogues", "root", "round", "royal", "rubble", "ruby", "rush", "run", "running", "rye", "sable", "sabre", "sacred", "sailor", "sailors", "saint", "salt", "sand", "satin", "satyr", "savage", "scrub", "sea", "sear", "secret", "seven", "shade", "shadow", "shady", "shaft", "she", "shield", "sickle", "silent", "silven", "silver", "skull", "slate", "slave", "slaves", "sleeping", "small", "smite", "smoke", "snow", "soft", "sorcerers", "spell", "spider", "spotted", "stan", "standing", "star", "stark", "stewards", "still", "stock", "stoke", "stone", "stony", "storm", "storming", "stout", "stow", "straight", "street", "sugar", "sun", "sunder", "sundered", "sundering", "swan", "sweet", "swine", "sword", "tall", "tame", "tarn", "teeth", "temple", "three", "thunder", "time", "tomb", "top", "torch", "tower", "trek", "tree", "troll", "true", "tug", "tusk", "twin", "under", "up", "upper", "utter", "vale", "valiant", "valley", "vile", "vine", "violent", "vow", "wagon", "walnut", "wand", "wander", "war", "ward", "warrant", "water", "watch", "wax", "waxen", "way", "weapon", "weasel", "weather", "wedge", "weed", "well", "west", "wester", "westron", "wet", "white", "wight", "wild", "wilder", "win", "wind", "windy", "winter", "wise", "wizards", "wolf", "wood", "woodland", "worm", "worms", "wraith", "wyvern", "yard", "yew"]
        return choice(elements)

    def suf(self):
        elements = [" alley", " alley", " alley", " avenue", " boulevard", " gate", " gate", " highway", " lane", " lane", " lane", " lane", " lane", " lane", " market", " road", " square", " square", " stair", " stair", " street", " street", " street", " street", " street", " track", " way", " way", " way", " way", " way", " way"]
        return choice(elements)




#x = generator()
#print x.start()